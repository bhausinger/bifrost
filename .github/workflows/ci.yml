name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.19.0'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and type check
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Format check
        run: pnpm format:check

  # Test frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests
        run: pnpm --filter @campaign-manager/frontend test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/frontend/coverage/lcov.info
          flags: frontend

  # Test backend
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @campaign-manager/server prisma generate

      - name: Run database migrations
        run: pnpm --filter @campaign-manager/server prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run backend tests
        run: pnpm --filter @campaign-manager/server test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/server/coverage/lcov.info
          flags: backend

  # Test Python scraper
  test-scraper:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scraper_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd apps/scraper
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          cd apps/scraper
          python -m pytest tests/ -v --cov=src --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scraper_test_db
          REDIS_URL: redis://localhost:6379/1

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/scraper/coverage.xml
          flags: scraper

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/frontend/Dockerfile
          target: build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/server/Dockerfile
          target: build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build scraper image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/scraper/Dockerfile
          target: development
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [lint, test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter @campaign-manager/frontend exec playwright install --with-deps

      - name: Start services
        run: |
          docker-compose up -d postgres redis
          sleep 10

      - name: Generate Prisma client
        run: pnpm --filter @campaign-manager/server prisma generate

      - name: Run database migrations
        run: pnpm --filter @campaign-manager/server prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/campaign_manager

      - name: Start applications
        run: |
          pnpm --filter @campaign-manager/server dev &
          pnpm --filter @campaign-manager/frontend dev &
          sleep 30

      - name: Run E2E tests
        run: pnpm --filter @campaign-manager/frontend test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/frontend/playwright-report/
          retention-days: 30